name: Build and Push to Docker Hub

on:
  push:
    branches: [main]
    paths:
      - "docker/**"
      - ".github/workflows/docker-hub.yml"
  pull_request:
    branches: [main]
    paths:
      - "docker/**"
      - ".github/workflows/docker-hub.yml"
  schedule:
    # Build weekly on Sundays at 03:00 UTC (after GHCR build)
    - cron: "0 3 * * 0"
  workflow_dispatch:
    inputs:
      publish:
        description: "Publish to Docker Hub"
        required: false
        default: "true"
        type: boolean

env:
  DOCKER_HUB_IMAGE: olafkfreund/nixos-vm-builder

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Verify Docker Hub access
        if: github.event_name != 'pull_request'
        run: |
          echo "Verifying Docker Hub authentication..."
          docker info

          # Test authentication by checking user info
          echo "Testing Docker Hub access for user: ${{ secrets.DOCKER_HUB_USERNAME }}"

          # Check if we can push to Docker Hub by testing with a simple push
          echo "Repository: ${{ env.DOCKER_HUB_IMAGE }}"

          # Create a test manifest to verify push permissions
          echo "Testing push permissions..."

          # Check if repository exists by attempting to pull existing tags
          echo "Checking if repository exists on Docker Hub..."

          if docker pull ${{ env.DOCKER_HUB_IMAGE }}:latest 2>/dev/null; then
            echo "✅ Repository exists on Docker Hub"
          else
            echo "❌ Repository does not exist on Docker Hub"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "⚠️  MANUAL ACTION REQUIRED:"
            echo "   1. Visit: https://hub.docker.com/repository/create"
            echo "   2. Create repository: ${{ env.DOCKER_HUB_IMAGE }}"
            echo "   3. Set visibility: Public"
            echo "   4. Click 'Create Repository'"
            echo "   5. Re-run this workflow"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "Continuing with build - push will fail until repository is created"
          fi

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_HUB_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=schedule,pattern=weekly-{{date 'YYYYMMDD'}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYY.MM.DD'}},enable={{is_default_branch}}

      - name: Debug build context
        run: |
          echo "Build context contents:"
          ls -la ./docker/
          echo "Dockerfile exists:"
          test -f ./docker/Dockerfile && echo "✅ Yes" || echo "❌ No"

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./docker
          file: ./docker/Dockerfile
          platforms: linux/amd64
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          pull: true

      - name: Debug image tags
        run: |
          echo "Generated tags:"
          echo "${{ steps.meta.outputs.tags }}"
          echo "Generated labels:"
          echo "${{ steps.meta.outputs.labels }}"
          echo "Available images:"
          docker images | grep "${{ env.DOCKER_HUB_IMAGE }}" || echo "No images found"

      - name: Push Docker image to Docker Hub
        if: github.event_name != 'pull_request'
        id: push
        continue-on-error: true
        uses: docker/build-push-action@v6
        with:
          context: ./docker
          file: ./docker/Dockerfile
          platforms: linux/amd64
          push: true
          load: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha

      - name: Handle push failure
        if: github.event_name != 'pull_request' && steps.push.outcome == 'failure'
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "❌ PUSH TO DOCKER HUB FAILED"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "🔧 SOLUTION:"
          echo "   1. Go to: https://hub.docker.com/repository/create"
          echo "   2. Repository name: ${{ env.DOCKER_HUB_IMAGE }}"
          echo "   3. Visibility: Public"
          echo "   4. Click 'Create Repository'"
          echo "   5. Re-run this workflow after creation"
          echo ""
          echo "📝 The Docker image was built successfully but cannot be pushed"
          echo "   until the Docker Hub repository is created manually."
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # Don't fail the entire workflow - just skip subsequent steps
          echo "push_failed=true" >> $GITHUB_OUTPUT

      - name: Verify push success
        if: github.event_name != 'pull_request' && steps.push.outcome == 'success'
        run: |
          echo "✅ Push completed successfully. Verifying image availability..."

          # Wait a moment for Docker Hub to process
          sleep 10

          # Try to pull the image to verify it was pushed successfully
          FIRST_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n 1)
          echo "Attempting to pull: $FIRST_TAG"

          if docker pull "$FIRST_TAG"; then
            echo "✅ Successfully verified image on Docker Hub"
            echo "🔗 Available at: https://hub.docker.com/r/${{ env.DOCKER_HUB_IMAGE }}"
          else
            echo "❌ Failed to pull image from Docker Hub"
            exit 1
          fi

      - name: Create Docker Hub README
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && steps.push.outcome == 'success'
        run: |
          # Create README for Docker Hub
          cat > docker-hub-readme.md << 'EOF'
          # NixOS VM Builder for Windows Users

          🐳 **Docker image for building NixOS VMs without installing Nix locally**

          Perfect for Windows users who want to try NixOS without the complexity of local Nix installation.

          ## Quick Start

          ```bash
          # Pull the latest image
          docker pull olafkfreund/nixos-vm-builder:latest

          # Build a VirtualBox VM with desktop template
          docker run --rm -v "${PWD}:/workspace" \
            olafkfreund/nixos-vm-builder:latest \
            virtualbox -t desktop

          # Build all formats with minimal template
          docker run --rm -v "${PWD}:/workspace" \
            olafkfreund/nixos-vm-builder:latest \
            all -t minimal
          ```

          ## Supported VM Formats

          - **VirtualBox** (.ova) - Import with File → Import Appliance
          - **Hyper-V** (.vhdx) - Use as virtual hard disk in new VM
          - **VMware** (.vmdk) - Use as virtual disk in new VM
          - **QEMU** (.qcow2) - Run with qemu-system-x86_64

          ## Available Templates

          | Template | Description | Use Case |
          |----------|-------------|----------|
          | `desktop` | Full GNOME desktop environment | General desktop use |
          | `server` | Headless server configuration | Server deployments |
          | `gaming` | Steam + gaming optimizations | Gaming desktop |
          | `minimal` | Minimal CLI-only system | Lightweight testing |
          | `development` | Programming tools & Docker | Development work |

          ## Usage Examples

          ### Windows PowerShell
          ```powershell
          # Build VirtualBox desktop VM
          docker run --rm -v "${PWD}:/workspace" olafkfreund/nixos-vm-builder:latest virtualbox -t desktop

          # Build Hyper-V server VM with custom specs
          docker run --rm -v "${PWD}:/workspace" olafkfreund/nixos-vm-builder:latest hyperv -t server -s 40960 -m 8192
          ```

          ### Windows Command Prompt
          ```cmd
          REM Build VMware gaming VM
          docker run --rm -v "%CD%:/workspace" olafkfreund/nixos-vm-builder:latest vmware -t gaming

          REM List all available templates
          docker run --rm olafkfreund/nixos-vm-builder:latest --list-templates
          ```

          ## Default Credentials

          All VMs are created with:
          - **Username**: `nixos`
          - **Password**: `nixos`

          ⚠️ **Change the default password immediately after first login!**

          ## Custom Configuration

          You can provide your own NixOS configuration:

          ```bash
          # Place your configuration.nix in current directory
          docker run --rm -v "${PWD}:/workspace" \
            olafkfreund/nixos-vm-builder:latest \
            virtualbox -c /workspace/configuration.nix
          ```

          ## Output Files

          VMs are saved to the current directory with naming pattern:
          `nixos-{vm-name}-{format}.{extension}`

          ## System Requirements

          - **Docker Desktop** (Windows/Mac/Linux)
          - **4GB+ RAM** for building VMs
          - **10GB+ disk space** per VM format
          - **Virtualization support** for running the VMs

          ## Source Code

          This Docker image is built from: [nixos-template repository](https://github.com/olafkfreund/nixos-template)

          ## Support

          - 📖 [Full Documentation](https://github.com/olafkfreund/nixos-template/blob/main/docs/WINDOWS-HOWTO.md)
          - 🐛 [Report Issues](https://github.com/olafkfreund/nixos-template/issues)
          - 💬 [Discussions](https://github.com/olafkfreund/nixos-template/discussions)

          ---

          **Built with ❄️ NixOS | Ready for 🪟 Windows**
          EOF

      - name: Update Docker Hub description
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && steps.push.outcome == 'success'
        uses: peter-evans/dockerhub-description@v4.0.0
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          repository: ${{ env.DOCKER_HUB_IMAGE }}
          readme-filepath: ./docker-hub-readme.md

      - name: Test built image
        if: steps.build.outcome == 'success'
        run: |
          echo "Testing Docker image functionality..."

          # Use the first tag from metadata (main branch gets 'latest' tag)
          FIRST_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n 1)
          echo "Testing image: $FIRST_TAG"

          # Verify image exists locally
          docker images | grep '${{ env.DOCKER_HUB_IMAGE }}' || {
            echo "❌ Image not found locally"
            docker images
            exit 1
          }

          # Test help command
          echo "Testing --help command..."
          docker run --rm "$FIRST_TAG" --help

          # Test template listing
          echo "Testing --list-templates command..."
          docker run --rm "$FIRST_TAG" --list-templates

          # Test validation mode
          echo "Testing validation mode..."
          docker run --rm "$FIRST_TAG" virtualbox -t minimal --validate-only

          echo "✅ All tests passed!"
