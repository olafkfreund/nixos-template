# Hardware configuration for QEMU/KVM virtual machine
# This file is typically generated by nixos-generate-config
# This is a template - replace with your actual VM hardware configuration

{ config, lib, modulesPath, ... }:

{
  imports = [
    (modulesPath + "/profiles/qemu-guest.nix")
  ];

  # VM hardware configuration
  boot.initrd.availableKernelModules = [
    "virtio_pci"
    "virtio_scsi"
    "virtio_blk"
    "virtio_net"
    "ahci"
    "xhci_pci"
    "sr_mod"
  ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ]; # or "kvm-amd" for AMD hosts
  boot.extraModulePackages = [ ];

  # Filesystem configuration - EXAMPLE FOR SINGLE DISK VM
  # Replace UUIDs with your actual values from `blkid`
  fileSystems."/" = {
    device = "/dev/disk/by-uuid/REPLACE-WITH-YOUR-ROOT-UUID";
    fsType = "ext4";
    options = [ "noatime" "discard" ]; # Optimizations for VMs
  };

  # Boot partition (if using UEFI)
  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/REPLACE-WITH-YOUR-BOOT-UUID";
    fsType = "vfat";
  };

  # Swap (optional for VMs)
  swapDevices = [
    # { device = "/dev/disk/by-uuid/REPLACE-WITH-YOUR-SWAP-UUID"; }
  ];

  # Alternative: Use a swap file instead
  # swapDevices = [
  #   { device = "/swapfile"; size = 2048; }  # 2GB swap file
  # ];

  # Network hardware
  networking.useDHCP = lib.mkDefault true;

  # Common QEMU network interface names
  # Uncomment the one that matches your VM
  # networking.interfaces.enp0s3.useDHCP = lib.mkDefault true;  # NAT
  # networking.interfaces.enp0s8.useDHCP = lib.mkDefault true;  # Host-only
  # networking.interfaces.ens3.useDHCP = lib.mkDefault true;    # Alternative naming

  # Platform
  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";

  # VM-specific hardware options
  hardware = {
    # CPU microcode (adjust based on host CPU)
    cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
    # cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

    # Enable firmware
    enableRedistributableFirmware = true;
  };

  # VM-specific boot options
  boot = {
    # Use GRUB for better VM compatibility
    loader = {
      grub = {
        enable = true;
        device = "/dev/vda"; # Adjust if using different disk naming
        # For UEFI VMs, use:
        # efiSupport = true;
        # device = "nodev";
      };

      # Explicitly disable systemd-boot to avoid conflicts
      systemd-boot.enable = lib.mkForce false;
    };
  };
}
